#ifndef __SYSCALLS_EXT_H__
#define __SYSCALLS_EXT_H__

/*
 * DO NOT MODIFY. This file is automatically generated by scripts/apigen.py,
 * based on the <plugin>_int.h file in your plugin directory.
 */

#include <dlfcn.h>
#include "panda_plugin.h"

#include "syscalls_common.hpp"
typedef void(*appendReturnPoint_t)(ReturnPoint&&);
static appendReturnPoint_t __appendReturnPoint = NULL;
inline void appendReturnPoint(ReturnPoint&& rp){
    assert(__appendReturnPoint);
    return __appendReturnPoint(std::move(rp));
}
typedef void(*registerExecPreCallback_t)(pre_exec_callback_t);
static registerExecPreCallback_t __registerExecPreCallback = NULL;
inline void registerExecPreCallback(pre_exec_callback_t callback){
    assert(__registerExecPreCallback);
    return __registerExecPreCallback(callback);
}
#define API_PLUGIN_NAME "syscalls"
#define IMPORT_PPP(module, func_name) { \
 __##func_name = (func_name##_t) dlsym(module, #func_name); \
 char *err = dlerror(); \
 if (err) { \
    printf("Couldn't find %s function in library %s.\n", #func_name, API_PLUGIN_NAME); \
    printf("Error: %s\n", err); \
    return false; \
 } \
}
inline bool init_syscalls_api(void){
    void *module = panda_get_plugin_by_name("panda_" API_PLUGIN_NAME ".so");
    if (!module) {
        printf("In trying to add plugin, couldn't load %s plugin\n", API_PLUGIN_NAME);
        return false;
    }
    dlerror();
IMPORT_PPP(module, appendReturnPoint)
IMPORT_PPP(module, registerExecPreCallback)
return true;
}

#undef API_PLUGIN_NAME
#undef IMPORT_PPP

#endif
